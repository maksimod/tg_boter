import asyncio
import logging
from telegram import InlineKeyboardButton, InlineKeyboardMarkup

logger = logging.getLogger(__name__)

async def process_survey_results(answers, update=None, context=None):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    
    Args:
        answers: –°–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ–ø—Ä–æ—Å–∞
        update: –û–±—ä–µ–∫—Ç Telegram update
        context: –û–±—ä–µ–∫—Ç Telegram context
    """
    logger.debug(f"Processing survey results: {answers}")
    
    if answers is None or not answers:
        logger.warning("No answers received for survey")
        if update and context:
            chat_id = update.effective_chat.id
            await context.bot.send_message(
                chat_id=chat_id,
                text="–î–µ–π—Å—Ç–≤–∏–µ –ø–æ—Å–ª–µ –æ–ø—Ä–æ—Å–∞"
            )
            keyboard = [[InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await context.bot.send_message(
                chat_id=chat_id,
                text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup
            )
    else:
        try:
            chat_id = None
            
            # –ü–æ–ª—É—á–∞–µ–º chat_id
            if update and hasattr(update, 'effective_chat') and update.effective_chat:
                chat_id = update.effective_chat.id
            elif update and hasattr(update, 'callback_query') and update.callback_query and update.callback_query.message:
                chat_id = update.callback_query.message.chat_id
            
            if not chat_id and context and hasattr(context, 'chat_data'):
                # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å chat_id –∏–∑ context
                for potential_chat_id in context.chat_data.keys():
                    chat_id = potential_chat_id
                    break
            
            if not chat_id:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å chat_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø—Ä–æ—Å–∞")
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–≤–µ—Ç–∞–º–∏
            message = "üîπ <b>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:</b>\n\n"
            
            # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞
            questions = []
            if update and update.effective_user:
                user_id = update.effective_user.id
                from base.survey.survey import _active_surveys
                if user_id in _active_surveys:
                    survey_data = _active_surveys[user_id].get('data', {})
                    questions = survey_data.get('questions', [])
            
            # –ï—Å–ª–∏ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç—ã —Å –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
            if questions and len(questions) >= len(answers):
                for i, answer in enumerate(answers):
                    if i < len(questions):
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π –≤ —Å–∫–æ–±–∫–∞—Ö
                        question_text = questions[i]['text']
                        if '(' in question_text:
                            question_text = question_text.split('(')[0].strip()
                        message += f"üî∏ <b>{question_text}:</b> {answer}\n"
                    else:
                        message += f"üî∏ <b>–û—Ç–≤–µ—Ç {i+1}:</b> {answer}\n"
            else:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º –æ—Ç–≤–µ—Ç—ã
                for i, answer in enumerate(answers):
                    message += f"üî∏ <b>–û—Ç–≤–µ—Ç {i+1}:</b> {answer}\n"
            
            logger.debug(f"Sending formatted survey results: {message}")
            
            if context and hasattr(context, 'bot'):
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=message,
                    parse_mode="HTML"
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"
                keyboard = [[InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await context.bot.send_message(
                    chat_id=chat_id,
                    text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=reply_markup
                )
            else:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: –æ–±—ä–µ–∫—Ç context.bot –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        except Exception as e:
            logger.error(f"Error processing survey results: {e}", exc_info=True)
            if update and context and hasattr(context, 'bot') and chat_id:
                try:
                    await context.bot.send_message(
                        chat_id=chat_id,
                        text=f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø—Ä–æ—Å–∞: {e}"
                    )
                except Exception as send_error:
                    logger.error(f"Error sending error message: {send_error}", exc_info=True) 