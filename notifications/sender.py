"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –≤ Telegram –±–æ—Ç–µ.
–í–∫–ª—é—á–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.
"""
import asyncio
import logging
from datetime import datetime, timedelta
import pytz

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
from database import (
    MOSCOW_TZ, get_all_active_notifications, get_notifications_to_send,
    mark_notification_as_sent, fix_notification_timezone
)

# –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger(__name__)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async def check_notifications(context):
    now = datetime.now(MOSCOW_TZ)
    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ {now.strftime('%d.%m.%Y %H:%M:%S %z')}")
    
    # –í—ã–≤–æ–¥–∏–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    all_notifications = get_all_active_notifications()
    logger.info(f"–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –±–∞–∑–µ: {len(all_notifications)}")
    for n in all_notifications:
        logger.info(f"–ê–∫—Ç–∏–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: ID={n[0]}, user_id={n[1]}, text={n[2]}, time={n[3]}, is_sent={n[4]}")
    
    # –ü–æ–ª—É—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    notifications = get_notifications_to_send(now)
    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(notifications)} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
    
    for notification_id, user_id, notification_text in notifications:
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Decimal –≤ int –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            user_id_int = int(user_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await context.bot.send_message(
                chat_id=user_id_int,
                text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {notification_text}"
            )
            
            # –ü–æ–º–µ—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
            mark_notification_as_sent(notification_id)
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {notification_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {notification_id}: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ñ–æ–Ω–µ
async def scheduled_job(context):
    while True:
        try:
            # –ñ–¥–µ–º –¥–æ –Ω–∞—á–∞–ª–∞ —Å–ª–µ–¥—É—é—â–µ–π –º–∏–Ω—É—Ç—ã
            now = datetime.now(MOSCOW_TZ)
            next_minute = (now + timedelta(minutes=1)).replace(second=0, microsecond=0)
            seconds_to_wait = (next_minute - now).total_seconds()
            
            logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ {seconds_to_wait:.2f} —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ {next_minute.strftime('%H:%M:%S')}")
            
            # –°–ø–∏–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –º–∏–Ω—É—Ç—ã
            await asyncio.sleep(max(0, seconds_to_wait))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            await check_notifications(context)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            await asyncio.sleep(60)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async def fix_timezones(user_id=None):
    """
    –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —á–∞—Å–æ–≤—ã–µ –ø–æ—è—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
    
    Args:
        user_id (int, optional): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—å–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å.
                                 –ï—Å–ª–∏ None, –∏—Å–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
    
    Returns:
        int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    """
    count = 0
    all_notifications = get_all_active_notifications()
    
    for notification_id, notif_user_id, _, notification_time, _ in all_notifications:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ —ç—Ç–æ –Ω–µ –µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if user_id is not None and int(notif_user_id) != int(user_id):
            continue
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
        if notification_time.tzinfo is None or str(notification_time.tzinfo) != str(MOSCOW_TZ):
            # –ï—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–π –∑–æ–Ω–µ, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –µ–≥–æ
            if notification_time.tzinfo is None:
                # –í—Ä–µ–º—è –±–µ–∑ –∑–æ–Ω—ã - —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –æ–Ω–æ –≤ UTC
                utc_time = notification_time.replace(tzinfo=pytz.UTC)
                msk_time = utc_time.astimezone(MOSCOW_TZ)
            else:
                # –í—Ä–µ–º—è —Å –¥—Ä—É–≥–æ–π –∑–æ–Ω–æ–π - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–æ—Å–∫–æ–≤—Å–∫—É—é
                msk_time = notification_time.astimezone(MOSCOW_TZ)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –≤ –±–∞–∑–µ
            if fix_notification_timezone(notification_id, msk_time):
                count += 1
    
    return count 