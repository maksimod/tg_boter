"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –≤ Telegram –±–æ—Ç–µ.
–í–∫–ª—é—á–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.
"""
import asyncio
import logging
import traceback
from datetime import datetime, timedelta
import pytz
import sys

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –º–æ–¥—É–ª—è database
from database import (
    MOSCOW_TZ, get_all_active_notifications,
    mark_notification_as_sent, fix_notification_timezone, 
    NOTIFICATIONS_TABLE, get_db_connection, get_notifications_to_send
)

# –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger(__name__)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –º–æ–¥—É–ª—è
logger.setLevel(logging.DEBUG)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
console_handler = logging.StreamHandler(sys.stdout)
console_handler.setLevel(logging.DEBUG)
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
console_handler.setFormatter(formatter)

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫ –ª–æ–≥–≥–µ—Ä—É, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
if not logger.handlers:
    logger.addHandler(console_handler)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–∫–∂–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª
    file_handler = logging.FileHandler('log/notifications.log')
    file_handler.setLevel(logging.DEBUG)
    file_handler.setFormatter(formatter)
    logger.addHandler(file_handler)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async def check_notifications(context):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç
    
    Args:
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –±–æ—Ç—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    try:
        if not hasattr(context, 'bot') or not context.bot:
            logger.error("–û–±—ä–µ–∫—Ç –±–æ—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            return
            
        # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ú–°–ö
        now = datetime.now(MOSCOW_TZ)
        logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ {now.strftime('%d.%m.%Y %H:%M:%S.%f %z')}")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        try:
            notifications = get_notifications_to_send(now)
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(notifications)} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
            
            if not notifications:
                logger.debug("–ù–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
                return
                
            logger.debug(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {notifications}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ –ë–î: {e}")
            logger.error(traceback.format_exc())
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        for notification in notifications:
            notification_id, user_id, message = notification
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ Decimal –≤ int
            notification_id = int(notification_id)
            user_id = int(user_id)
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è #{notification_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {message}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
            max_retries = 3
            for attempt in range(1, max_retries + 1):
                try:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    await context.bot.send_message(
                        chat_id=user_id,
                        text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {message}"
                    )
                    logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ #{notification_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                    
                    # –ü–æ–º–µ—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
                    if mark_notification_as_sent(notification_id):
                        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ #{notification_id} –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ")
                    else:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è #{notification_id}")
                    
                    break  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ –ø–æ–ø—ã—Ç–æ–∫, –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
                except Exception as e:
                    error_traceback = traceback.format_exc()
                    logger.error(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt}/{max_retries} - –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è #{notification_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                    if "bot was blocked by the user" in str(e).lower():
                        logger.warning(f"–ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}, –ø–æ–º–µ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ")
                        mark_notification_as_sent(notification_id)
                        break
                    
                    if attempt < max_retries:
                        wait_time = 2 * attempt  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Å –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                        logger.info(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {wait_time} —Å–µ–∫—É–Ω–¥...")
                        await asyncio.sleep(wait_time)
                    else:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ #{notification_id} –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫")
                        logger.error(f"–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏: {error_traceback}")
    except Exception as e:
        error_traceback = traceback.format_exc()
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        logger.error(f"–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏: {error_traceback}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ñ–æ–Ω–µ
async def scheduled_job(context):
    logger.info("–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    iteration = 0
    
    try:
        # –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        logger.info("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
        try:
            now = datetime.now(MOSCOW_TZ)
            logger.info(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {now.strftime('%d.%m.%Y %H:%M:%S.%f %z')}")
            logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
            await check_notifications(context)
            logger.info("–ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
            logger.error(traceback.format_exc())
        
        # –ó–∞—Ç–µ–º –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        while True:
            iteration += 1
            try:
                # –ñ–¥–µ–º –¥–æ –Ω–∞—á–∞–ª–∞ —Å–ª–µ–¥—É—é—â–µ–π –º–∏–Ω—É—Ç—ã
                now = datetime.now(MOSCOW_TZ)
                next_minute = (now + timedelta(minutes=1)).replace(second=0, microsecond=0)
                seconds_to_wait = (next_minute - now).total_seconds()
                
                logger.info(f"–ò—Ç–µ—Ä–∞—Ü–∏—è #{iteration}: –æ–∂–∏–¥–∞–Ω–∏–µ {seconds_to_wait:.2f} —Å–µ–∫—É–Ω–¥ –¥–æ –Ω–∞—á–∞–ª–∞ —Å–ª–µ–¥—É—é—â–µ–π –º–∏–Ω—É—Ç—ã ({next_minute.strftime('%H:%M:00')})")
                
                # –°–ø–∏–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –º–∏–Ω—É—Ç—ã
                await asyncio.sleep(max(0, seconds_to_wait))
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–º–µ–Ω—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–æ–≤–Ω–æ –≤ –Ω–∞—á–∞–ª–µ –º–∏–Ω—É—Ç—ã)
                check_time = datetime.now(MOSCOW_TZ)
                logger.info(f"–ò—Ç–µ—Ä–∞—Ü–∏—è #{iteration}: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å –≤ {check_time.strftime('%H:%M:%S.%f')} (–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {next_minute.strftime('%H:%M:%S')})")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                await check_notifications(context)
                
                # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                end_time = datetime.now(MOSCOW_TZ)
                logger.info(f"–ò—Ç–µ—Ä–∞—Ü–∏—è #{iteration}: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤ {end_time.strftime('%H:%M:%S.%f')}, –∑–∞–Ω—è–ª–∞ {(end_time - check_time).total_seconds():.3f} —Å–µ–∫")
                
                # –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω—è–ª–∞ –±–æ–ª—å—à–µ 45 —Å–µ–∫—É–Ω–¥, –ª–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–∫–∞—Ö
                if (end_time - check_time).total_seconds() > 45:
                    logger.warning(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω—è–ª–∞ –±–æ–ª–µ–µ 45 —Å–µ–∫—É–Ω–¥! –í–æ–∑–º–æ–∂–Ω–æ, —Å–ª–µ–¥—É—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã.")
            except Exception as e:
                error_traceback = traceback.format_exc()
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ –Ω–∞ –∏—Ç–µ—Ä–∞—Ü–∏–∏ #{iteration}: {e}")
                logger.error(f"–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏: {error_traceback}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–±–æ—Ç—É —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥")
                await asyncio.sleep(15)
    except Exception as e:
        error_traceback = traceback.format_exc()
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")
        logger.error(f"–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏: {error_traceback}")
        logger.error("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async def fix_timezones(user_id=None):
    """
    –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —á–∞—Å–æ–≤—ã–µ –ø–æ—è—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
    
    Args:
        user_id (int, optional): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—å–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å.
                                 –ï—Å–ª–∏ None, –∏—Å–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
    
    Returns:
        int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    """
    logger.info(f"–ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤ –¥–ª—è user_id={user_id if user_id else '–≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'}")
    count = 0
    try:
        all_notifications = get_all_active_notifications()
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ {len(all_notifications)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤")
        
        for notification_id, notif_user_id, _, notification_time, _ in all_notifications:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ —ç—Ç–æ –Ω–µ –µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if user_id is not None and int(notif_user_id) != int(user_id):
                continue
                
            logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {notification_id} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {notif_user_id})")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
            if notification_time.tzinfo is None or str(notification_time.tzinfo) != str(MOSCOW_TZ):
                # –ï—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–π –∑–æ–Ω–µ, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –µ–≥–æ
                if notification_time.tzinfo is None:
                    # –í—Ä–µ–º—è –±–µ–∑ –∑–æ–Ω—ã - —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –æ–Ω–æ –≤ UTC
                    logger.debug(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {notification_id} –Ω–µ –∏–º–µ–µ—Ç —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–∑ UTC")
                    utc_time = notification_time.replace(tzinfo=pytz.UTC)
                    msk_time = utc_time.astimezone(MOSCOW_TZ)
                else:
                    # –í—Ä–µ–º—è —Å –¥—Ä—É–≥–æ–π –∑–æ–Ω–æ–π - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–æ—Å–∫–æ–≤—Å–∫—É—é
                    logger.debug(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {notification_id} –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å {notification_time.tzinfo}, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –ú–°–ö")
                    msk_time = notification_time.astimezone(MOSCOW_TZ)
                
                logger.debug(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {notification_id}: {notification_time} -> {msk_time}")
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –≤ –±–∞–∑–µ
                if fix_notification_timezone(notification_id, msk_time):
                    count += 1
                    logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {notification_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {msk_time}")
                else:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {notification_id}")
    except Exception as e:
        error_traceback = traceback.format_exc()
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤: {e}")
        logger.error(f"–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏: {error_traceback}")
    
    logger.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ {count} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    return count 